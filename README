Prerequisites:
--------------

- RIM JDE (tested with 4.1 and up)
- Apache Ant (1.6.x or higher)
- bb-ant-tools-X-Y.jar



Using:
------

- Copy the bb-ant-tools.jar into the your Ant lib directory, or just add it to
  the classpath in your build script.
- Add the <typedef> to your build script, eg:
  <typedef resource="bb-ant-defs.xml" classpathref="bb-ant-tools.classpath" />
- Enjoy (see examples below)



Reference:
----------

All tasks will first try to get the "jde.home" property from the project.
If this property is not set, then the "jdehome" attribute must be explicitly
set for each task.

Rapc task:
==========
Attributes
jdehome   - optional: jde home directory
jdkhome   - optional: alternate JVM home directory for launching rapc
srcdir    - directory of source files
destdir   - optional: cod file output directory, defaults to build directory
exepath   - optional: tells rapc which directory contains preverify executable
output    - required: name of output files eg: <output>.cod, <output>.cso
import    - optional: path of jar files to import
importref - optional: reference to imports path
defines   - optional: delimited list of preprocessor defines, use platform
                      specific path seperator (; = Windows, : = Unix)

quiet     - optional: tells the rapc command to be less chatty, default is true
verbose   - optional: turns on verbose output, default is false
nodebug   - optional: do not generate .debug files, default is false
nowarn    - optional: disable warning messages, default is false
warnerror - optional: treat all warnings as errors, default is false
noconvert - optional: don't convert images to png, default is false

Nested elements
<define> - single nested preprocessor define
   tag - tag name to define (eg: #ifdef THE_DEFINED_TAG)
<src> - path-like structure of files (.java, .png, etc)
<import> - path-like structure of import jars
<jdp> - collection of project attributes
   type - library,cldc,midlet defaults to cldc
   title - module title
   vendor - company name
   version - project version
   description - project description
   arguments - arguments passed to main method
   midletclass - MIDlet class name
   systemmodule - true if system module (run in background, no icon)
   runonstartup - true if application should start when device starts
   startuptier - startup priority in relation to other applications,
                 default value is 7, lower value = higher priority
   ribbonposition - position of icon in ribbon. 0 = default, higher
                    values move icon up priority
   icon - ribbon icon (path relative to destdir, eg: ../img/ribbon1.png)
   file - properties file containing the project attributes
   
   <entry> - nested element of <jdp>
             alternate entry point (currently for CLDC applications only)
      title - entry point title (ribbon icon title for non-system modules)
      arguments - arguments passed to main method
      systemmodule - true if system module (run in background, no icon)
      runonstartup - true if application should start when device starts
      startuptier - startup priority in relation to other applications,
                    default value is 7, lower value = higher priority
      ribbonposition - position of icon in ribbon. 0 = default, higher
                       values move icon up priority
      icon - ribbon icon (path relative to destdir, eg: ../img/ribbon1.png)
      file - properties file containing entry point attributes

Sigtool task:
=============
Sigtool task will launch the signature tool on a given cod file or set of
cod files.  If a single cod file is specified, then a file will be created
along side the cod file to mark it as signed.

Attributes
jdehome    - optional: jde home directory
codfile    - optional: cod file to sign
forceclose - optional: close regardless of its success, default false
close      - optional: close after request if no errors occur, default true
request    - optional: requests signatures when the tool launches, default true
password   - optional: removes the interactive password prompt, this implicitly
             sets "close" and "request" to true

Nested elements
<cod> - path-like structure of cod files



Preprocessor:
-------------

Apparently since version 4.0, rapc compiler has had support for a simple set
of preprocessor macros.  To use the preprocessor you must:

 * enable processing on a per file basis by placing //#preprocess in the very
   first line of each .java file
 * use //#ifdef <TAG>, //#ifndef <TAG> to begin a block of text that will be
   conditionally compiled if the TAG is defined or undefined respectively
 * use //#else after //#ifdef <TAG> or //#ifndef <TAG>
 * close conditional blocks with //#endif

The rapc compiler command line expects a delimited list of TAG's defined.  The
delimiter is the platform specific path separator, therefor when using 'defines'
attribute of the <rapc> tag, be sure to use the correct separator (';' for
Windows and ':' for Unix type operating systems) otherwise a build time error
will occur.  Alternately you can specify preprocessor defines as nested elements
to avoid specifying the separator character explicitly.



Examples:
---------

<!-- example 1 -->
<!-- bare minimum usage -->
<rapc output="ca_slashdev_MyKickAssApp" srcdir="${src.dir}"
      jdehome="${jde.home}" />

<!-- example 2 -->
<!-- uses jde.home property from project, specifies app title, vendor, etc -->
<property name="jde.home" location="c:/jde4.1" />
...
<rapc output="ca_slashdev_MyKickAssApp" srcdir="${src.dir}">
   <jdp title="Kick Ass App" vendor="Slashdev" version="1.0" type="cldc" />
</rapc>

<!-- example 3 -->
<!-- use fileset to select source files, import dependancy lib -->
<property name="jde.home" location="c:/jde4.1" />
...
<rapc output="ca_slashdev_MyKickAssApp">
   <jdp title="Kick Ass App" vendor="Slashdev" version="1.0" type="cldc" />
   <src>
      <fileset dir="${src.dir}">
         <include name="**/*.java" />
         <includs name="**/*.rrc" />
      </fileset>
   </src>
   <import location="../libKickAss/ca_slashdev_libKickAss.jar" />
</rapc>

<!-- example 4 -->
<!-- use the preprocessor -->
<rapc output="ca_slashdev_MyKickAssApp" srcdir="${src.dir}" defines="TAG1;TAG2">
   <define tag="TAG3"/>
   <define tag="TAG4"/>
</rapc>



Licensing:
----------
This product is distributed under the GPL. Please read through the file
COPYING for more information about our license.



Contact:
--------
Josh Kropf
josh@slashdev.ca
